Let's have a look at one person in our contacts data and let's create our own unique index.
mongo
use contactData
db.persons.findOne()

The ID index which we get out of the box for this field actually is unique by default, this is a setting MongoDB gives us
and this ensures that we can't add another document with the same value into the same collection.
Now sometimes we have the use case that we also need that behavior for a different field and therefore we can add our own unique indexes.
Let's say for "e-mail" but of course we could have used login uuid if we wanted to but.
Let's use that top level "e-mail" element here and let's create an index on contacts with createIndex() method.
On email let's say in ascending order and here, we now pass a second argument to createIndex() method where we configure this index,
there we can now set unique to true.
db.persons.createIndex({email: 1}, {unique: true})

We see that we get an error that we have some duplicate keys as it seems, so this generally worked but it found a duplicate key.
Now let's quickly confirm this by looking into contacts and finding all contacts where the e-mail is "abigail.clark@example.com":
db.persons.find(email: "abigail.clark@example.com").count()

We got 2 documents with this email and that's the reason we got an error creating a new index with the "email" field.
So unique indexes can help us as a developers ensure data consistency and help us avoid duplicate data for fields that we need to 
have unique, so the "_id" is unique by default but we have other use cases like maybe that "email" here too.

The unique index is a great way for us to not just speed up our find queries, but also to guarantee that we have unique values for
that given field in that collection.