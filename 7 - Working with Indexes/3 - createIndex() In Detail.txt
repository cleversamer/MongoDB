Whilst we can't really see the index, we can think of the index as a simple list of values and pointers to the original document.
Something like this (for the "age" field):
(29, "address in memory/ collection a1")
(30, "address in memory/ collection a2")
(33, "address in memory/ collection a3")

The documents in the collection would be at the "addresses" a1, a2 and a3.
The order does not have to match the order in the index.

The important thing is that the index items are ordered (ascending or descending - depending on how we created the index).
createIndex({age: 1}) creates an index with ascending sorting.
createIndex({age: -1}) creates one with descending sorting.

MongoDB is now able to quickly find a fitting document when we filter for its "age" as it has a sorted list.
Sorted lists are way quicker to search, because we can skip entire ranges (and don't have to look at every single document).