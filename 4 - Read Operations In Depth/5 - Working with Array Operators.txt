* The list of Array Query Operators:
1. $all:       Matches arrays that contain all elements specified in the query.
2. $elemMatch: Selects documents if element in the array field matches all the specified $elemMatch conditions.
3. $size:      Selects documents if the array field is a specified size.
4. $slice:     Specifies the number of elements in an array to return in the query result.

* How can we use them?

1. Using $all:
Syntax => {<field>: {$all: [<value1>, <value2> ..., <valueN>]}}
mongo
use test

Let's find all items documents that have these tags [ "appliance", "school", "book" ]:
db.inventory.find({tags: {$all: ["appliance", "school", "book"]}}).pretty()

Let's find all items documents that their "qty" array has both of the following objects:
db.inventory.find({qty: {$all: [{"$elemMatch": {size: "M", num: {$gt: 50}}}, {"$elemMatch": {num : 100, color: "green"}}]}}).pretty()

2. Using $elemMatch:
Syntax => {<field>: {$elemMatch: {<query1>, <query2>, ..., <queryN>}}}
mongo
use test

HINT: We cannot specify a $where expression in an $elemMatch.
HINT: We cannot specify a $text query expression in an $elemMatch.

Let's find all items documents that have the following tags:
db.inventory.find({tags: {$elemMatch: {$eq: "appliance"}}})

3. Using $size:
Syntax => {<field>: {$size: <value>}}
mongo
use test

Let's find all items documents that have only two tags:
db.inventory.find({tags: {$size: 2}}).pretty()

4. Using $slice:
Syntax => {<query>, {<arrayField>: {$slice: <number>}}}
Syntax => {<query>, {<arrayField>: {$slice: [<number to skip>, <number to return>]}}}
mongo
use tv

First syntax specifies the number of elements to return in the <arrayField>.
HINT: Specify a positive number n to return the first n elements.
HINT: Specify a negative number n to return the last n elements.
HINT: If the <number> is greater than the number of array elements, the query returns all array elements.

Second syntax Specifies the number of elements to return in the <arrayField> after skipping the specified number of elements starting 
from the first element.
HINT: We must specify both elements.
* For the <number to skip>:
HINT: Specify a positive number n to skip n elements from the start of the array;
      i.e. 0th index position. Based on a zero-based array index, 1 indicates the 
      starting position of the 2nd element, etc. 
      If n is greater than the number of array elements, the query returns an empty 
      array for the <arrayField>.
HINT: Specify a negative number n to skip backward n elements from the start of the array;
      i.e. 0th index position Based on a zero-based array index (i.e. the first element is at index 0), 
      -1 indicates the starting position of the last element, etc. 
      If the absolute value of the negative number is greater than the number of array elements, 
      the starting position is the start of the array.

* For the <number to return>:
HINT: We must specify a positive number n to return the next n elements, starting after skipping the specified number.

Let's find all movies and for each document's genres, we display only the first two genres in the array:
db.movies.find({}, {genres: {$slice: 2}, name: 1})

Let's find all movies and for each document's genres, we display only the second and third genres in the array:
db.movies.find({}, {genres: {$slice: [1, 2]}, name: 1})


******************** ADDITIONAL TO ARRAYS QUERY => Querying Embedded Fields & Arrays ********************
1. Let's assume that we have a document in a collection called persons like this:
{ "name": "Person", "age": 21, "address": { x: 2766, y: 4210 } }

How can we query the "x" property inside "address" field?
It is quite easy and similar to query a field, and using the following query:
db.persons.findOne({"address.x": 2766})

Also, we can use operators.

2. Let's find all items in the inventory collection that have "appliance" tag:
mongo
use test
db.inventory.find({"tags": "appliance"}).pretty()