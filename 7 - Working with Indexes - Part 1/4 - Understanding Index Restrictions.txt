So we had a look at our first index, and this index actually sped up our query.
It sped up our query for people older than 60.
Now something interesting happens if we do run the same query for people older than 20.
If we do run this query, it's still super fast but what we see is that we essentially seem to have no person in our dataset that is 
younger than 20. We'll have to go through the entire index, and every single element matches our query, and then we fetch documents
for that, and we will see that the execution time for this is higher than it was for people older than 60:

db.persons.explain("executionStats").find({"dob.age": {$gt: 20}})

Now something interesting happens if we get rid of that index:
db.persons.dropIndex({"dob.age": 1})

And now let's run the same query again and explain it:
db.persons.explain("executionStats").find({"dob.age": {$gt: 20}})

Now that we have no index. What we'll see is that this now actually is faster, because we save the step of going for the index.
If we have a query that will return a large portion or the majority of our documents, an index can actually be slower because we 
then just have an extra step to go through our almost entire index list and then we have to go to the collection and get all these 
documents.
So we then just have an extra step because if we do a full collection scan, it can be faster and it certainly is if we return all 
elements but even for the majority it would be faster because with a full collection scan, we already have all the documents in memory
and then an index doesn't offer us any more because that just is an extra step.
So if we have queries that regularly return the majority or all of our documents, an index will not really help us there.